rules_version = '2';

// Firestore rules
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getSpace(spaceId) {
      return get(/databases/$(database)/documents/spaces/$(spaceId));
    }

    function isSpaceOwner(spaceId) {
      let space = getSpace(spaceId);
      return isSignedIn() && space != null && space.data.userId == request.auth.uid;
    }

    // User profiles
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Spaces
    match /spaces/{spaceId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Transactions
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && isSpaceOwner(resource.data.spaceId);
      allow create: if isSignedIn() && isSpaceOwner(request.resource.data.spaceId);
      allow update, delete: if isSignedIn() && isSpaceOwner(resource.data.spaceId);
    }
  }
}

// Storage rules
service firebase.storage {
  match /b/{bucket}/o {
    // Profile pictures
    match /users/{userId}/profile/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId
        && request.resource.size < 5 * 1024 * 1024 // 5MB max
        && request.resource.contentType.matches('image/.*'); // Only images
    }
  }
}